version: '3' #yaml포멧버전
x-airflow-common: #반복되는 설정 구문을 정의하여 사용
  &airflow-common 
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.2.0-python3.8}
  image: ${AIRFLOW_IMAGE_NAME:-airflow_server} #커스텀이미지인 airflow_server 사용 

  # build: . 
  environment:
    &airflow-common-env
    # Executor 테스트 인스턴스를 실행하는 주체이며 종류가 다양함 EX) localExcutor(구성이 간단하나 단일 장비환경에서 작동하기때문에 실제 서비스 환경에서는 적합하지 않다.), celeryExecutor 
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor # 워커를 2대 이상 구성할 수 있다는 장점 존재 ==> worker 수를 확장할 수 있다. 
    #Airflow에 존재하는 DAG와 Task들의 메타데이터를 저장하는 데이터베이스입니다.
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0 #작업 전달 브로커 설정 
    AIRFLOW__CORE__FERNET_KEY: '' #db안에서의 암호화된 통신을 위한 키 
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true' #dag 생성시 일시중지 명령어
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false' #예제 dag 생성 명령어 
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth' #api사용자를 인증하는 방식 *기본 인증 
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-} #필요 pip install  명령어 
 
  volumes: #컨테이너에서 저장된 데이터들을 살려두기 위한 부분 
    # - /your/pipeline/path:/opt/airflow/dags       #like under line
    - /mnt/d/DataLake/AirFlow/pipeline:/opt/airflow/dags
    # - airflow.cfg:/opt/airflow/airflow.cfg
    - /mnt/d/DataLake/logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock

  user: "${AIRFLOW_UID:-50000}:0"
  privileged: true

  depends_on: #의존성 
    &airflow-common-depends-on
    redis: 
      condition: service_healthy
    postgres:
      condition: service_healthy
    # postgres2:
    #   condition: service_healthy

services: #생성할 컨테이너 항목들  
  mlflow:
    # <<: *airflow-common
    image: mlflow
    ports:
      - 5000:5000
    command: mlflow server --host 0.0.0.0 --backend-store-uri postgresql+psycopg2://airflow:airflow@postgres2/mlflow --default-artifact-root ./mlruns
    expose:
      - 5000
    depends_on: #서비스간에 의존성을 설정 
      <<: *airflow-common-depends-on 
    volumes:
      - ./mlflow:/mlruns

  postgres2:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: mlflow
    ports: 
      - "5433:5432"
    volumes:
      - postgres2-db-volume:/var/lib/postgresql/data
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-U", "airflow"]
    #   interval: 5s
    #   retries: 5
    restart: always

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports: 
      - "5432:5432"    
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis: #스케줄러에서 작업자에게 메세지를 전달하는 브로커 (작업들이 들어가는 공간)
    image: redis:latest #컨테이서 생성에 사용할 이미지 
    expose: # 호스트에는 노출하지 않고 연결된 서비스끼리만 접근 가능한 포트 입력
      - 6379
    healthcheck: # 이 서비스의 컨테이너가 정상인지 여부를 확인하기 위해 실행되는 검사를 구성하는 명령어 
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s #5초마다
      timeout: 30s #30초 기다려주고
      retries: 50 #50번 재시도 
    restart: always # 컨테이너가 중단된 경우 자동으로 재시작 해주는 옵션 

  airflow-webserver: #airflow 웹 UI서버 컨테이너 
    <<: *airflow-common #앞서 정의한 &airflow-common의 설정 적용 
    command: webserver
    # command: airflow providers list\      
    network_mode: "host"  
    #ports: #컨테이너에서 호스트와 통실할 포트를 지정       
#      - 8081:8081
    healthcheck: # 이 서비스의 컨테이너가 정상인지 여부를 확인하기 위해 실행되는 검사를 구성하는 명령어 
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always 
    depends_on: #서비스간에 의존성을 설정 
      <<: *airflow-common-depends-on 
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler: # 실행 주기가 되면 작업을 생성, 의존하는 작업이 모두 성공하면 Broker에 넘김 
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker: # 스케줄러에 의해 주어진 실제 작업을 실행하는 작업
    <<: *airflow-common
    command: celery worker    
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    # dns:
    #   - "10.120.1.24"
    # dns_search:
    #   - lottechilsung.co.kr
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer: #없어도 정상작동확인 
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init: #airflow 초기화 서비스 
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.0.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true' #airflow를 실행할 때 db를 업그레이드한다. 실제 운영환경에서는 사용하지 말것! 
      _AIRFLOW_WWW_USER_CREATE: 'true'  #자동으로 웹서버 사용자 생성 
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}  
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - .:/sources #왜 필요한지 ??

  airflow-cli: #없어도 정상작동 확인 
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow


volumes:
  postgres-db-volume:
  postgres2-db-volume:

#실행명령어
#docker-compose up
